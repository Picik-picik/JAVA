public class _07_SCE {

	public static void main(String[] args) {
		int num1 = 0, num2 = 0;
		boolean result;
		
		result = (num1 += 10) < 0 && (num2 += 10) > 0;
		System.out.println("result : " + result);
		System.out.println("num1 = " + num1 + ", num2 = " + num2);
		
		result = (num1 += 10) > 0 || (num2 += 10) > 0;
		System.out.println("result : " + result);
		System.out.println("num1 = " + num1 + ", num2 = " + num2);
	}

}

/*  
■ 논리 연산자와 Short-Circuit Evaluation(Lazy Evaluation)
자바 연산자의 연산특성 중에 Short-Circuit Evaluation이라는 것이 있다.(이하 SCE라 한다.) 이제 이와 관련해서
설명을 할 텐데, 여러분은 우선 이에 대한 한글 표현이 궁금할 것이다. 솔직히 필자도 궁금해서 조사를 좀 해 봤다.
그런데 표현 방식이 통일되어 있지 않고, 흔히 사용되는 표현들도 뜻을 충분히 담아내지 못하고 있어서 필자는 영문을 그대로
표기하였다. 그래도 이해를 돕기 위해 이를 한글로 번역하라고 한다면 다음과 같이 번역하면 좋을 것 같다
(이해를 돕기 위한 필자의 사견이다.)

"가장 빠르게 연산을 진행하기 위한 계산방식"

실행결과를 보니 변수 num2에 저장된 값이 하나도 증가되지 않았다. 다시 말해서 && 연산자와 || 연산자의 오른편에 있는
+= 연산이 진행되지 않은 것이다. 이것이 바로 SCE의 연산 특성이다.

(false이면)          (이 부분은 볼 것 없음)
(num1 += 10) < 0 && (num2 += 10) > 0 -> && 연산 결과는 false
(true이면)           (이 부분은 볼 것 없음)
(num1 += 10) > 0 || (num2 += 10) > 0 -> || 연산 결과는 true

&& 연산자의 왼편에 있는 피연산자가 false이면, 오른편에 있는 피연산자에 상관없이 연산결과는 false가 된다.
따라서 연산속도의 향상을 위해서 && 연산자의 오른편은 확인(실행)하지 않는 편이 낫다는 결론이 나온다.
실제로 자바는 이러한 상황에서 && 연산자의 오른편을 실행하지 않는다. 이것이 바로 SCE이다.
마찬가지로 || 연산자의 왼편에 있는 피연산자가 true이면, 오른편에 있는 피연산자에 상관 없이 || 연산의 결과는 true가
된다. 따라서 이러한 경우에도 || 연산자의 오른편은 실행되지 않는다. 이제 SCE가 가져다 주는 부작용(side effect)이
무엇인지 알았을 것이다. 따라서 위 예제의 7행, 11행과 같은 문장이 구성되지 않도록 주의해야 한다.
*/