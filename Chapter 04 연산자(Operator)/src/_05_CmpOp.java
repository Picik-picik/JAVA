public class _05_CmpOp {

	public static void main(String[] args) {
		int A = 10, B = 20;
		
		if(true)
			System.out.println("참 입니다!");
		else
			System.out.println("거짓 입니다!");
		
		if(A > B)
			System.out.println("A가 더 크다!");
		else
			System.out.println("A가 더 크지 않다!");
		
		if(A != B)
			System.out.println("A와 B는 다르다!");
		else
			System.out.println("A와 B는 같다!");
	}

}

/*
■ 관계 연산자 (<, >, <=, >=, ==, !=)
관계 연산자는 크기 및 동등 관계를 따지는 연산자이다. 즉 관계 연산자는 두 피연산자의 크기 관계를 따져주는 이항 연산자이다.
따라서 '비교 연산자'라고도 한다. 두 피연산자의 값을 비교하기 때문이다.

연산자    연산자의 기능     결합방향
<     예) n1 < n2          →
      n1이 n2보다 작은가?
>     예) n1 > n2          →
      n1이 n2보다 큰가?
<=    예) n1 <= n2         →
      n1이 n2보다 같거나 작은가?
>=    예) n1 >= n2         →
      n1이 n2보다 같거나 큰가?
==    예) n1 == n2         →
      n1과 n2가 같은가?
!=    예) n1 != n2         →
      n1과 n2가 다른가?
      
위의 관계 연산자들은 연산의 결과에 따라서 true 또는 false를 반환한다.

   A == B
   
A와 B의 값이 동일하다면 true, 동일하지 않으면 false가 반환된다.
참고로 연산자의 우선순위가 =보다 ==가 훨씬 높으므로 괄호는 생략할 수 있다.

   boolean result = (A == B);
   
변수 result에는 A와 B가 같을 경우 true, 다를 경우 false가 저장된다. 이렇듯 관계 연산자가 제공하는 기능은
우리에게 익숙하기 때문에 연산자의 사용 방법에 대해서는 그리 궁금할 것이 없다.
오히려 여러분은 이러한 연산자들의 활용 방안이 더 궁금할 것이다. 그래서 필자는 다음 Chapter에서 구체적으로 설명하는
if~else문이라는 것을 이용해서 관계 연산자와 더불어 true와 false의 활용에 대해 조금 언급하고자 한다.
참고로 if~else문에 대해서는 다음 Chapter에서 제대로 된 설명이 이뤄지니 여기서는 간단히 맛만 보면 된다.

이렇듯 관계 연산자와 더불어 true와 false는 프로그램의 흐름을 조절하는 용도로 사용이 된다. 위 예제에서는
A 또는 B에 저장된 값에 따라서 실행되는 문장의 구성이 달라진다. 이제 참과 거짓을 표현하기 위한 데이터 true와 false가
필요한 이유를 조금이라도 이해할 수 있겠는가? 그리고 앞서 if~else에 대해서는 맛만 보자고 하였는데, 위의 예제에서
보여준 것 이상의 내용이 존재하지 않는다. 따라서 위의 예제만으로도 if~else가 이해되었다면, 다음 Chapter에서
공부할 내용이 그만큼 줄어든 셈이다.
*/
