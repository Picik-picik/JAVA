public class _15_PostfixOp {

	public static void main(String[] args) {
		int num1 = 7;
		int num2, num3;
		
		num2 = num1++;  // num1이 8이 되긴 하는데..
		num3 = num1--;  // num1이 다시 7이 되긴 하는데...
		
		System.out.println(num1);
		System.out.println(num2);
		System.out.println(num3);
	}

}

/*  
■ 증가, 감소 연산자(++, --) : postfix
++, -- 연산자는 postfix 연산자로도 사용이 된다.(postfix는 접미사라는 뜻이다.) postfix 연산자는
피연산자의 뒤에 붙는 연산자를 의미한다. 물론 조금 전에 설명한 prefix 연산자의 형태로 사용될 때와는 의미가 조금 다르다.

연산자    연산자의 기능                     결합방향
++        피연산자에 저장된 값을 1 증가      ←
(postfix) 예) val = n++;
--        피연산자에 저장된 값을 1 감소      ←
(postfix) 에) val = n--;

위 표에서 언급하는 내용만 보면 ++ 연산자와 -- 연산자를 피연산자의 뒤에 붙인다고 해서 달라질 것은 없어 보인다.
그러나 분명 큰 차이를 보인다.

실행결좌는 PrefixOp.java와 차이가 있다. 분명 위 예제 7행에서는 num1의 값이 증가되었다.
그런데 num2에 저장된 값은 num1이 증가되기 이전의 값이다. 따라서 이 결과를 보고 다음과 같은 추론도 가능하다.

"아! 대입연산이 먼저 진행되었군, 대입 연산자가 우선순위가 높은가 보군!"

그러나 이전에 작성한 표를 보면 ++ 와 -- 연산자의 우선순위가 더 높음을 알 수 있다. 즉 대입연산이 먼저 진행된 것은 아니라는 뜻이다.
그렇다면 왜? num2에 저장된 값은 num1이 증가하기 이전의 값일까? 그것은 피연산자의 뒤에 붙는(postfix) ++, --
연산자의 연산 특성 때문에 그렇다.

두 ++ 연산자 모두 대입연산보다 먼저 실행이 되어 num1의 값을 8이 되게 한다. 단! postfix ++ 연산자의 경우,
연산이 이뤄진 문장 안에서는 여전히 증가되기 이전의 값 7로 인식된다는 특징이 있다. 그러나 다음문장으로 넘어가면
증가된 값 8로 인식이 된다. 이는 -- 연산자도 마찬가지이다. postfix -- 연산자의 경우, 연산이 이뤄지는 순간
피연산자의 값은 1이 감소한다. 그러나 연산이 이뤄진 문장 내에서는 여전히 감소하기 이전의 값으로 인식이 된다.
그리고 다음 문장으로 넘어가야 비로소 감소된 값으로 인식이 된다.
*/
