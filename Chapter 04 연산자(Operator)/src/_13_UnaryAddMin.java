public class _13_UnaryAddMin {

	public static void main(String[] args) {
		int n1 = 5;
		System.out.println(+n1);
		System.out.println(-n1);
		
		short n2 = 7;
		int n3 = +n2;
		int n4 = -n2;
		System.out.println(n3);
		System.out.println(n4);
	}

}

/*  
단항 연산자는 피연산자가 하나인 연산자로써 이항 연산자에 비해 그 수가 매우 적다.
그러나 이중에서 일부 연산자는 매우 유용하게 사용이 되므로 정확히 이해하고 있어야 한다.

■ 부호 연산자로서의 +와 -
+와 -연산자는 이항 연산자로써 덧셈과 뺄셈의 기능을 한다. 그런데 이 두 기호는 단항 연산자로 부호연산의 기능도 제공한다.
(여러분이 알고 있는 수학적 의미와 동일하다)

먼저 실행결과를 통해서 확인할 수 있는 사실은 다음 두 가지이다.

* 단항 연산자로서 - 는 부호를 바꾸는 역할을 한다.
* 단항 연산자로서 + 는 특별히 하는 일이 없다.

- 연산자에 대해서는 추가로 설명이 필요 없을 것이다. 오히려 설명이 필요한 부분은 + 연산자이다. 붙여주나마나 한 + 단항
연산자를 만든 이유는 무엇일까? 그것은 다음과 같은 코드가 컴파일 되도록 허용하기 위함이다.

   int n = +128;
   
이렇듯 음수가 아님을 강조하기 위해서 정수 앞에 +를 붙여도 컴파일 에러가 발생하지 않도록 +를 단항 연산자로 정의하고 있다.
그렇다면 정말로 +는 무늬만 연산자 아닐까? 실제로는 연산이 일어나지 않는, 그러니끼 컴파일러에 의해서 무시되거나 하는
연산자는 아닐까? 위 예제 9행을 다음과 같이 변경해서 컴파일 해보면 이에 대한 진실을 알 수 있다.

   short n3 = +n2;
   
n2가 short형 변수이니, 이 문장이 더 적절하다는 생각을 할 수 있다. 그러나 이 문장은 컴파일 에러를 발생시킨다.
정수는 연산이 이뤄지기에 앞서 int형으로 변환이 된다고 하지 않았는가? 따라서 n2에 저장된 값이 int형으로 자동 형 변환이
되어 + 연산이 진행된다. 결국 연산의 결과도 int형이 되어, 이보다 작은 크기의 short형 변수 n3에는 저장이 불가능하다.
따라서 short형 변수에 값을 지정하기 위해서는 다음과 같이 명시적으로 형 변환을 해야만 한다.(물론 그 모습이 적절하지는 않다.)

   short n3 = (short)+n2;
   
이로써 단항 연산자 +도 무늬만 연산자가 아닌, 실제 연산의 과정을 거치는 연산자라는 사실이 밝혀졌다.
비록 하는 일은 별로 없지만 말이다.
*/