public class _17_BitOpUst {

	public static void main(String[] args) {
		byte n1 = 13;
		byte n2 = 7;
		int n3 = n1 & n2;
		
		System.out.println(n3);  // 숫자 5가 출력된다.
	}

}

/*  
이번에는 비트 단위로 연산을 진행하는 비트 연산자들을 소개하고자 한다. 그런데 비트 단위로 연산이 진행된다고 하면
언뜻 하드웨어의 컨트롤을 떠올리기 쉽다. 물론 그러한 용도로도 사용이 되지만, 일반적인 응용 프로그램 개발에서도
매우 유용하게 사용이 된다. 따라서 비트 연산자들에 대해서도 자세히 알고 있어야 한다.

■ 비트 연산자의 이해
비트 연산자는 비트단위로 연산을 진행하는 연산자이며, 피연산자는 반드시 정수이어야 한다. 실수에 대해서는 비트 연산이 불가능하다.
실수를 가지고 진행하는 비트단위 연산은 의미를 지니지 않기 때문에 자바는 이를 지원하지 않는다.

연산자    연산자의 기능                                                       결합방향
&     비트단위로 AND 연산을 한다.                 →
            예) n1 & n2;
|     비트단위로 OR 연산을 한다.                  →
            예) n1 | n2;
^     비트단위로 XOR 연산을 한다.                 →
            예) n1 ^ n2;
~     피연산자의 모든 비트를 반전시켜서 얻은 결과를 반환        ←
            예) ~n;
          
여러분은 위의 표를 이해하기에 앞서 비트단위 연산이 의미하는 바를 이해할 필요가 있다.

위 예제 4행과 5행에는 byte형 변수 두 개가 선언되어 있으며, 6행에서는 이 두 변수를 피연산자로 하여 비트단위 & 연산을
진행하고 있다. 물론 정수는 연산에 앞서 int형으로의 자동 형 변환 과정을 거치고, 이로 인해서 연산의 결과도 int형이
되지만,(그래서 변수 n3를 int형으로 선언했지만) 설명의 편의를 위해서 이러한 형 변환을 고려하지 않고 6행에서 진행되는
& 연산의 과정 및 결과를 그림으로 보이고자 한다.

n1 0 0 0 0 1 1 0 1   비트단위
n2 0 0 0 0 0 1 1 1   & 연산
---------------------------
   0 0 0 0 0 1 0 1   비트단위 & 연산의 결과
         5 (연산 결과!)
         
& 연산자는 비교의 대상이 되는 두 비트가 모두 1인 경우에만 1을 반환하여 연산결과를 구성하는 연산자이다.
그런데 필자는 지금 당장 & 연산자를 설명하려는 것이 아니다. 필자는 위의 예제와 그림을 통해서 다음 사실을 먼저 설명하고자 하는 것이다.

* 비트 연산자는 비트단위로 연산을 진행한다.
* 비트 연산자는 비트 단위로 진행된 연산의 결과를 묶어서 하나의 연산결과로 반환한다.

그림을 보면 & 연산의 과정에서 변수 n1과 n2의 동일한 위치에 있는 비트들끼리 연산이 이뤄지고 있음을 알 수 있다.
(둘 다 1인 경우에만 1을 반환한다.) 그리고 이렇게 해서 얻어진 결과를 가지고 하나의 연산결과를 구성하는 것도 알 수 있다.
이렇듯 비트 연산자는 비트 단위로, 다시 말해서 동일한 위치에 있는 비트 별로 연산하여 그 결과를 하나의 정수로 변환하는 연산자이다.
*/