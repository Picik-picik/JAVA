public class _03_ENotation {

	public static void main(String[] args) {
		double e1 = 1.2e-3; // e를 대신해서 대문자 E를 사용해도 됨
		double e2 = 1.2e+3;
		
		int num1 = 0xA0E;   // 0x로 시작을 하면 이는 16진수 표현으로 해석이 된다.
		int num2 = 0752;    // 0으로 시작을 하면 이는 8진수 표현으로 해석이 된다.
		
		System.out.println(e1);
		System.out.println(e2);
		System.out.println(num1);
		System.out.println(num2);
	}

}

/*
정수 자료형 : byte, short, int, long
자바는 총 4개의 정수 자료형을 제공한다.
자료형의 선언은 메모리 공간의 데이터 저장 및 참조방식을 결정하는 것으로 이해할 수 있다.
따라서 byte, short, int, long형으로 선언이 된 변수에는 소수점 이하의 값을 포함하는 실수를 저장할 수 없다.
4개의 정수 자료형이 갖는 차이는, 정수를 표현하는데 사용이 되는 메모리 공간의 크기에 있다.
short는 2바이트, int는 4바이트를 기준으로 정수를 표현한다.
따라서 변수를 short로 선언하면 2바이트의 메모리 공간이 할당되고, int로 선언을 하면 4바이트의 메모리 공간이 할당된다.

일반적으로 여러분이 사용하는 CPU는 int형 정수연산을 가장 고속으로 처리하게끔 설계되어 있다.
따라서 자바는 정수형 연산을 진행할 때,(덧셈이건 뺄셈이건) 모든 피연산자를 int형으로 변환하는 과정을 거친다.
오늘날의 컴퓨팅 환경은 넉넉한 메모리 공간을 자랑한다. 따라서 int가 가장 일반적인 선택이 될 수 있다.
때문에 여러분은 정수의 저장을 위한 변수 선언 시 큰 고민 없이 int를 선택하면 된다.

참고
- long형에서의 int형으로의 변환은 일어나지 않습니다.
long은 8바이트고 int는 4바이트다. 따라서 long형 데이터를 int형으로 변환해버리면 데이터의 손실이 발생하고 만다.
때문에 long형 데이터를 피연산자로 하는 연산 시에는 int형으로의 자료형 변환이 발생하지 않는다.

우리가 프로그램상에서 표현하는 데이터들 중에는 연산이 중심이 되는 데이터들도 있지만,
연산보다는 데이터가 지니는 값 자체가 중심이 되는 경우도 있기 때문에 byte, short도 매우 유용하게 사용이 된다.
예를 들어 게임 캐릭터의 움직임 표현을 위한 3D 그래픽 정보, 노래와 같은 음원 정보를 저장하려면
수십만, 아니 수백만 이상의 숫자 정보를 저장해야 하기 때문에, 이러한 경우에는 연산보다 데이터의 표현이 중심이 된다.
(연산이 전혀 불필요하다는 뜻이 아니다) 그리고 이러한 경우에는 그 크기에 따라서 int보다 작은 byte 또는 short를,
그리고 double보다 작은 float로 데이터를 표현하게 된다.

실수 자료형 : float, double
소수점 이하의 값을 지니는 실수의 저장 및 표현을 위한 자료형은 그 크기에 따라 float와 double로 나뉜다.
이들은 모두 정밀도를 포기하고 표현의 범위를 넓힌 자료형들이기 때문에 float와 double의 선택 기준은
값의 표현범위에 있지 않다. 물론 8바이트로 표현되는 double이 4바이트로 표현되는 float보다 넓은 표현범위를 갖는다.
그러나 float도 매우 충분한 값의 표현범위를 갖는다.

자료형을 선택하는 기준은 정밀도에 있다. 실수를 표현하는데 사용이 되는 바이트의 수가 많으면 아무래도 오차가 발생할 확률은
낮아진다. 실제로 4바이트로 표현되는 float는 6자리의 정밀도(소수점 이하 6자리의 정밀도)를 갖고,
double은 15자리의 정밀도(소수점 이하 15자리의 정밀도)를 갖기 때문에,
표현하고자 하는 값에서 요구하는 정밀도를 기준으로 자료형을 선택하게 된다.

참고
- 소수점 이하 15자리까지 오차가 발생하지 않는다고 해도
double형 데이터 하나만 놓고 보면 소수점 이하 15자리까지는 오차가 발생하지 않는다.
하지만 그 이하에서부터는 오차가 발생하기 때문에, 오차가 존재하는 double형 변수 둘 이상을 더하다 보면,
소수점 이하 15자리가 아니라, 소수점 이하 셋째 짜리에서도 오차가 발생할 수 있다.
따라서 실수의 계산은 기본적으로 오차가 존재한다고 인식해야 한다.

자바는 소수부가 큰 실수 표현의 편의를 위해 e표기법이라는 것을 지원하며, 데이터의 성격에 적절한 정수의 표현을 위해서
16진수와 8진수 표현을 지원한다.
*/