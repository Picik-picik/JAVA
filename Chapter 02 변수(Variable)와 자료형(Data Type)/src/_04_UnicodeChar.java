public class _04_UnicodeChar {

	public static void main(String[] args) {
		char ch1 = 'A';
		char ch2 = '한';
		char ch3 = 0x3091;
		char ch4 = 0x3092;
		
		System.out.println(ch1);
		System.out.println(ch2);
		System.out.println(ch3);
		System.out.println(ch4);
	}

}

/*
문자 자료형 : char
컴퓨터 프로그램은 그 종류에 상관없이 인간의 상호작용을 필요로 하기 때문에 문자의 표현은 매우 중요하다고 할 수 있다.
그러나 하드웨어는 기본적으로 문자를 인식하고 표현할 수 있는 장치가 아니라, 오로지 숫자만을 인식하고 표현할 수 있는 장치이다.
따라서 문자의 표현은 하드웨어 위에서 동작하는 소프트웨어의 몫일 수 밖에 없다.
하드웨어가 숫자밖에 인식을 못하니 문자를 숫자로 표현하는 수밖에 없다.
그래서 문자를 숫자로 표현하기 위한 몇몇 표준이 프로그래밍 언어에 상관없이 만들어졌는데,
자바는 이중에서 유니코드(unicode)라는 표준을 근거로 문자를 표현하고 있다.
유니코드는 문자 하나를 2바이트로 표현하는 문자 체계이다. 2바이트로 표현할 수 있는 데이터의 수는 2의 16승 개이므로
총 6만개 이상의 문자표현이 가능하다는 계산이 나온다. 따라서 유니코드는 세계의 모든 언어를 표현할 수 있는 문자 체계이다.

자바에서 문자 하나를 변수에 저장하면 실제로는 해당 문자의 유니코드 값이 저장된다.
유니코드라는 하나의 문자 체계를 가지고 세계 모든 나라의 언어를 표현할 수 있기 때문에, 자바의 유니코드 지원은
한글을 영어와 동일한 수준으로 컨트롤할 수 있다는 장점으로 이어진다.

   char ch1 = 'A';
   char ch2 = '한';
   
char형은 문자의 표현을 위한 자료형이므로 이를 기반으로 선언된 변수 ch1과 ch2는 그 크기가 각각 2바이트이다.
문자는 위의 코드가 보이듯이 작은 따옴표로 묶어서 표현하기로 약속되어 있다.
즉 작은 따옴표는 하나의 문자를 표현하는데 사용이 되는 기호이다. 그리고 이렇게 문자가 표현이 되면,
변수 ch1과 ch2에는 각각 문자 'A'의 유니코드 값과 문자 '한'의 유니코드 값이 저장된다.
즉 위의 두 문장은 아래의 문장과 완전히 일치하다고 볼 수 있다.

   char ch1 = 65;    // 65는 16진수로 0x41
   char ch2 = 54620; // 54620은 16진수로 0xD55C
   
문자 'A'의 유니코드 값은 10진수로 65, 문자 '한'의 유니코드 값은 10진수로 54620이다.
이렇게 해당 문자의 유니코드 값을 직접 저장해도 상관없다. 물론 문자의 표현을 위해서 이렇게 직접
유니코드 값을 저장하는 일은 거의 없다. 다만 문자를 저장하는 경우에 해당 문자의 유니코드 값이 저장된다는 사실을
설명하기 위해서 사용했을 뿐이다.

위의 예제를 통해서 여러분이 기억해야 할 중요한 내용을 정리하면 다음과 같다.
* 문자는 작은 따옴표로 표현이 된다.
* char형 변수는 문자의 저장을 위해 사용된다.
* char형 변수에 실제 저장되는 것은 저장되는 문자의 유니코드 상수 값이다.
* System.out.println은 char형 데이터, 즉 문자를 적절히 출력해 낸다.

참고
- 해당 국가의 포트가 설치되어 있어야 합니다.
자바 프로그램에서 A라는 언어의 문자를 출력하기 위해서는 해당 언어의 폰트가 운영체제에 설치되어 있어야 한다.
폰트가 설치되어 있지 않다면 정상적인 출력을 보이지 않는다.
*/