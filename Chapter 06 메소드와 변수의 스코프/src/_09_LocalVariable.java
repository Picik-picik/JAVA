public class _09_LocalVariable {

	public static void main(String[] args) {
		boolean scope = true;
		
		if (scope) {
			int num = 1;
			num++;
			System.out.println(num);
		}
		else {
			int num = 2;
			System.out.println(num);
		}
		
		simple();
	}
	
	public static void simple() {
		int num = 3;
		System.out.println(num);
	}

}

/*
스코프(scope)는 한글로 '범위' 또는 '영역'이라는 뜻을 갖고 있다. 그런데 여기서 말하는 영역은 변수의 접근, 또는 변수가
존재할 수 있는 영역을 의미한다.

■ 가시성(Visibility) : 여기서는 저 변수가 보여요.
중괄호 { . . . } 가 사용되었던 때를 기억해 보자. 이들 기호는 언제 사용이 되었는가?

* 메소드의 몸체 부분을 정의하는 용도로 사용된다.
* if문, 또는 if~else문을 정의하면서 사용이 된다.
* switch문과 다양한 반복문에서도 사용이 된다.

이처럼 중괄호는 다양한 경우에 사용이 된다. 그런데 이렇게 중괄호로 영역이 형성되면, 감싸이는 영역은 변수에 관한 별도의
스코프를 형성하게 된다.

위 예제에서는 num이라는 이름의 변수 세 개를 선언하고 있다. 이렇듯 동일한 이름의 변수를 다수 선언 할 수 있는 이유는 선언된
변수가 속하는 중괄호의 영역(스코프)이 다르기 때문이다. 각각의 변수가 속하는 스코프를 정리하면 다음과 같다.

* 7행의 num -> 6행의 if에 속하는 중괄호
* 12행의 num -> 11행의 else에 속하는 중괄호
* 20행의 num -> 19행의 메소드 simple에 속하는 중괄호

기본적으로 변수는 자신이 속한 중괄호 내에서만(물론 선언된 이후부터) 접근이 가능하다. 때문에 속한 영역이 다르면 이름이
동일할지라도 문제가 되지 않는다. 그리고 이러한 변수의 스코프는 반드시 중괄호에 의해서만 형성되는 것은 아니다.
for문의 일부로 선언되는 변수와 메소드의 매개변수는 중괄호 내에 선언되지는 않지만, 이어서 등장하는 중괄호 내에서만 접근이 가능하다.

   for (int num = 0; num < 5; num++) {    ↑
      // 추가적인 변수 num 선언 불가 지역                  변수 num의 접근 가능지역
   }                                      ↓
   
   public static void myFunc(int num) {   ↑
      // 추가적인 변수 num 선언 불가 지역                  변수 num의 접근 가능지역
   }                                      ↓
   
위에서 보이듯이 for문의 변수 num은 for문 내에서 접근이 가능한 변수이기 때문에 for문의 중괄호 내에서 num이라는 이름의
변수 선언이 불가능하다. 마찬가지로 매개변수도 선언된 메소드 내에서 접근이 가능하기 때문에 동일한 이름의 변수 선언이 불가능하다.

■ 해당 영역을 벗어나면 사라져버립니다.
지금까지 보아온, 중괄호 내에 선언이 되는 변수들을 가리켜 '지역변수(local variable)'라 한다.(사실 지금까지 여러분이
봐 왔던 변수는 모두 지역변수였다.) 뿐만 아니라 for문에서 선언되는 변수와 매개변수까지도 지역변수의 범주에 포함을 시킨다.
그리고 이러한 지역변수들이 갖는 중요한 특징이 있다.

"지역변수는 선언된 지역을 벗어나 버리면 메모리 공간에서 소멸됩니다."

여기서 중요한 사실은 자동으로 소멸이 된다는 것이다. 만약에 자동으로 소멸되지 않고 계속해서 메모리 공간에 남아있게 된다면,
계속되는 프로그램의 실행에 문제가 발생할 수도 있다. 그런데 다행히도 이러한 일은 발생하지 않는다. 지역변수들은 자신이 선언된
영역을 벗어나버리면 자동으로 사라지기 때문이다.
*/