public class _05_MethodReturns {

	public static void main(String[] args) {
		int result = adder(4, 5);
		System.out.println("4와 5의 합 : " + result);
		System.out.println("3.5의 제곱 : " + square(3.5));
	}

	public static int adder(int num1, int num2) {
		int addResult = num1 + num2;
		return addResult;
	}
	
	public static double square(double num) {
		return num * num;
	}
}

/*
■ 값을 반환하는 메소드
지금까지는 메소드가 값을 전달받을 수 있음에 대해서만 설명하였다. 그러나 거꾸로 메소드는 메소드를 호출한 영역으로
값을 전달할(반환할) 수도 있다.

먼저 우리에게 익숙한 main 메소드를 보자. main이라는 이름의 왼편에는 void이라는 키워드가 존재하는데 다음의 의미를 지닌다.

"이 메소드는 값을 반환하지(메소드를 호출한 영역으로 값을 전달하지)않는다."

이렇듯 메소드의 이름 왼편에는 메소드가 반환하는 값의 정보를 삽입하게 되어 있다. 그리고 우리가 지금까지 정의한 모든 메소드들은
값을 반환하지 않기 때문에 이곳에 항상 void를 삽입했던 것이다. 자! 그럼 이번에는 9행과 14행에 정의되어 있는 메소드들을 살펴보자.
메소드의 이름 왼편에는 각각 int와 double이라는 자료형 이름이 삽입되어 있다. 따라서 이들이 의미하는 바는 각각 다음과 같다.

"adder 메소드는 int형 데이터를 반환합니다."
"square 메소드는 double형 데이터를 반환합니다."

그럼 과연 값의 반환은 어떻게 구성을 하는 것일까? 이에 대한 이해를 위해서 adder 메소드를 조금 더 자세히 관찰해 보기로 하겠다.

                 1.
   public static int adder(int num1, int num2) {
      int addResult = num1 + num2;
      return addResult;
      2.
   }

1. 메소드의 이름 왼편에 존재하는 반환형(반환하는 데이터의 자료형)
2. 메소드의 몸체(중괄호 내부)에 존재하는 return이라는 키워드이다. 이 return이 값의 반환을 명령하는 키워드로써,
return문은 다음의 의미를 담고 있다.

"addResult에 저장되어 있는 값을 반환한다."

즉 return의 오른편에 등장하는 대상을 반환하게 되는데, 이곳에는 반환의 대상이 되는 상수나 변수, 또는 위 예제와 같이 연산문이
올 수 있으며,(이런 경우, 연산의 결과를 반환하게 된다.) 이렇게 구성이 되는 return문을 실행하게 되면, 메소드는 종료가
되고, 메소드를 호출한 영역으로 값은 반환이 된다. 따라서 위 예제 4행의 메소드 호출 이후에는 값이 반환되어 다음과 같은
문장 구성을 이루게 된다.

   int result = adder(4, 5);
              ↓
   int result = 9;
   
값의 반환이 의미하는 바를 보여준다. 값의 반환? 사실 좀 막연한 표현이다. 그러나 값의 반환이 의미하는 바가 다음과 같음을
알리고 있다.

"값의 반환은 메소드의 호출문장이, 반환된 값으로 대체됨을 의미한다."

따라서 정수가 와야 할 위치에 정수를 반환하는 메소드의 호출문이 대신 올 수 있고, 실수가 와야 할 위치에 실수를 반환하는 메소드의
호출문이 대신 올 수도 있다. 위 예제 6행처럼 말이다. 즉 위 예제 6행은 square 메소드 호출 이후에 반환되는 값을 이용해서
다음과 같은 문장을 실행하게 된다.

   System.out.println("3.5의 제곱 : " + 12.25);
   
마지막으로, 메소드에 둘 이상의 값을 전달할 수는 있어도, 메소드는 오직 하나의 값만을 반환할 수 있다는 사실을 기억할 필요가 있다.
*/