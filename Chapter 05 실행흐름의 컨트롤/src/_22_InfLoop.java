public class _22_InfLoop {

	public static void main(String[] args) {
		int num = 1;
		
		while (true) {
			if (num % 6 == 0 && num % 14 == 0)
				break;
			num++;
		}
		
		System.out.println(num);
	}

}

/*
■ 무한루프와 break
무한루프라는 것은 반복의 조건이 true로 명시되어서 해당 반복문을 빠져나가지 못하도록 구성 된 반복문을 의미한다.
즉 while문을 이용한 무한루프는 다음과 같이 구성이 된다.

   while (true) {
      . . . .
   }
   
그리고 do~while문을 이용한 무한루프는 다음과 같이 구성이 된다.

   do {
      . . . .
   } while (true)
   
유사하게 for문도 반복의 조건을 명시하는 부분에 true를 삽입하면 무한루프가 형성된다. 그러나 다음과 같이 반복의 조건을
명시하는 부분을 그냥 비워도 무한루프가 형성되기 때문에, 그냥 비워두는 것이 보다 일반적인 구현 방식이다.(for문에만 해당
하는 이야기이다.)

   for ( ; ; ) {
      . . . .
   }
   
그렇다면 이러한 무한루프는 어떠한 용도로 사용될 수 있을까? 물론 그 자체만 가지고는 특별히 의미를 부여하기 힘들다.
그러나 다음 예제에서와 같이 break문과 결합이 되어 의미를 부여할 수도 있다.

위 예제에서는 6의 배 수이면서 동시에 14의 배수인 가장 작은 자연수를 찾고 있다. while은 무한루프로 형성되어 있다.
그렇다면 이 부분에서 무한루프를 형성한 이유는 무엇일까? 이는 6의 배수이면서 14의 배수가 되는 자연수의 크기를 예측할 필요가
없어지기 때문이다. 만약에 이를 무한루프로 구현하지 않는다면, 6의 배수이면서 14의 배수인 자연수가 얼마 이상 되지
않는지에 대한 대력적인 계산이 선행되어야 한다. 그래야 다음과 같이 반복문을 잘못 구성하는 실수를 범하지 않게 된다.

   while (num < 30) {
      if (num % 6 == 0 && num % 14 == 0)
         break;
      
      num++;
   }
   
이렇듯 무한루프는 break문과 함께 유용하게 사용될 수 있다. 무한루프에 대한 활용능력도 갖춰야 한다.
*/