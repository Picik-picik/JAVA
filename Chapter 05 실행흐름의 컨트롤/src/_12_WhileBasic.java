public class _12_WhileBasic {

	public static void main(String[] args) {
		int num = 0;
		
		while (num < 5) {
			System.out.println("I like Java " + num);
			num++;
		}
	}

}

/*
앞서 소개한 컨트롤 문장들은 조건에 따른 선택적 실행을 위한 것들이었다. 그러나 지금부터 소개하는 컨트롤 문장들은 일부
코드의 반복 실행을 위한 것이다.

■ while 반복문
while문의 동작방식을 이해하는 것은 if문을 이해하는 것만큼이나 쉽다.

while문에 이어서 등장한 중괄호 영역이 총 5회 반복 실행되었다.

   while (num < 5) { // 반복 조건
      System.out.println("I like Java " + num);   // 반복
      num++;                                      // 영역
   }
   
while문의 소괄호에는 반복의 조건을 명시한다.(true 또는 false를 반환하는 연산문으로 구성되어야 한다.) 그리고 그 조건이
만족되는 동안에는(연산의 결과가 true인 동안에는) 횟수에 상관없이 while문의 중괄호를 반복 실행하게 된다.
즉 다음의 순서로 while문은 실행이 된다.

   반복조건 검사 -> true면 반복영역 실행 -> 반복조건 검사 -> true면 반복영역 실행 -> . . . .
   
이렇듯 반복의 조건이 만족되는 동안에는 위의 과정을 계속해서 반복하게 되는데, 이러한 while문이 지니는 특징을 정리하면
다음과 같다.

* 반복조건을 먼저 검사 한 후에 반복영역의 실행여부를 결정한다.
* 반복조건을 먼저 검사하기 때문에 반복영역이 한 차례도 실행되지 않을 수 있다.

이렇듯 while문은 매우 단순한 구조를 지닌다. 때문에 활요하는 데에도 큰 어려움은 없다. 하지만 반복의 조건이 계속해서
만족되어,(연산의 결과로 계속해서 true만 반환이 되어) while문을 빠져나가지 못하는 상황을 만들지 않도록 주의해야 한다.
예를 들어서 위 예제의 8행을 실수로 빼먹는다면, 프로그램은 종료되지 않고 계속해서 while문만 반복 실행하게 될 것이다.

참고
- 중괄호는 필요에 따라서 삽입하면 됩니다.
while문의 중괄호는 반복 실행해야 할 문장이 둘 이상인 경우에 필요한 것이다.(if문에서의 중괄호와 역할이 같다.) 따라서
반복 실행할 문장이 하나라면, 굳이 중괄호를 할 필요는 없다. 그리고 이는 잠시 후에 소개하는 do~while문과 for문에서도
마찬가지이다.
*/